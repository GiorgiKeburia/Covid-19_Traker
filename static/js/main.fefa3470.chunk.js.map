{"version":3,"sources":["InfoBox.js","utill.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["infoBox","title","cases","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","state","keyMAP","random","TileLayer","attribution","url","Table","options","legend","display","elements","point","text","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","borderWidth","fill","option","App","setCountries","setCountry","setcountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","responce","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","InfoBox","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fefa3470.chunk.js","sourcesContent":["import React from 'react'\nimport \"./infoBox.css\"\nimport { \n    Card,\n    CardContent,\n    Typography,\n  } from '@material-ui/core';\n\nfunction infoBox({ title, cases,active, total, ...props}) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"}`}>\n            <CardContent>\n                {/* Title */}\n\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n\n                {/* Numbers */}\n\n                <h2 className=\"infoBox__cases\">{cases}</h2>\n\n                {/* Total */}\n\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\n                    {total} Total\n                </Typography>\n\n            </CardContent>\n            \n        </Card>\n    )\n}\n\nexport default infoBox\n","import numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\n\nconst casesTypeColors = {\n    cases: {\n      hex: \"#d90429\",\n      rgb: \"rgb(204, 16, 52)\",\n      half_op: \"rgba(204, 16, 52, 0.5)\",\n      multiplier: 800,\n    },\n    recovered: {\n      hex: \"#0081a7\",\n      rgb: \"rgb(125, 215, 29)\",\n      half_op: \"rgba(125, 215, 29, 0.5)\",\n      multiplier: 1200,\n    },\n    deaths: {\n      hex: \"#fb4443\",\n      rgb: \"rgb(251, 68, 67)\",\n      half_op: \"rgba(251, 68, 67, 0.5)\",\n      multiplier: 2000,\n    },\n  };\n\nexport const sortData=(data)=>{\n    const sortedData=[...data];\n\n    sortedData.sort((a,b)=>{\n        if(a.cases>b.cases){\n            return -1\n        }else{\n            return 1\n        }\n    })\n    return sortedData;\n}\n\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+ ${numeral(stat).format(\"0.0a\")}` : \"+ 0\"\n\n\nexport const showDataOnMap=(data, casesType=\"cases\")=>(\n    data.map(country => (\n        <Circle\n            center={[country.countryInfo.lat, country.countryInfo.long]}\n            color={casesTypeColors[casesType].hex}\n            fillColor={casesTypeColors[casesType].hex}\n            fillOpacity={0.4}\n            radius={\n            (Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier)/4\n        }\n         >\n        <Popup>\n          <div className=\"info-container\">\n            <div\n              className=\"info-flag\"\n              style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n            ></div>\n            <div className=\"info-name\">{country.country}</div>\n            <div className=\"info-confirmed\">\n              Cases: {numeral(country.cases).format(\"0,0\")}\n            </div>\n            <div className=\"info-recovered\">\n              Recovered: {numeral(country.recovered).format(\"0,0\")}\n            </div>\n            <div className=\"info-deaths\">\n              Deaths: {numeral(country.deaths).format(\"0,0\")}\n            </div>\n          </div>\n        </Popup>\n      </Circle>\n    ))\n)","import React from 'react';\nimport \"./Map.css\";\nimport {MapContainer as LeaftMap, TileLayer} from \"react-leaflet\";\nimport { showDataOnMap } from './utill';\n\nfunction Map({ countries,casesType, center, zoom }) {\n    const state = {\n        keyMAP: Math.random(),\n     };\n    return (\n        <div className=\"map\"> \n            <LeaftMap key={state.keyMAP} center={center} zoom={zoom}>\n                <TileLayer\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                />\n                {showDataOnMap(countries, casesType)}\n            </LeaftMap>\n        </div>\n    )\n}\n\nexport default Map\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import numeral from 'numeral'\nimport React from 'react'\nimport './Table.css'\n\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {countries.map(({country, cases}) => (\n                <tr>\n                    <td>{country}</td>\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                </tr>\n          ))}\n        </div>\n    )\n}\n\nexport default Table\n","import React, { useState,useEffect } from 'react'\nimport {Line} from 'react-chartjs-2'\nimport numeral from 'numeral'\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    title: {\n        display: true,\n        text: 'Chart.js Line Chart'\n      },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n  \n\n  const buildChartData = (data, casesType) => {\n    let chartData = [];\n    let lastDataPoint;\n    for (let date in data.cases) {\n      if (lastDataPoint) {\n        let newDataPoint = {\n          x: date,\n          y: data[casesType][date] - lastDataPoint,\n        };\n        chartData.push(newDataPoint);\n      }\n      lastDataPoint = data[casesType][date];\n    }\n    return chartData;\n  };\n  \n  function LineGraph({ casesType , ...props}) {\n    const [data, setData] = useState({});\n  \n    useEffect(() => {\n      const fetchData = async () => {\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\n          .then((response) => {\n            return response.json();\n          })\n          .then((data) => {\n            let chartData = buildChartData(data, casesType);\n            setData(chartData);\n            console.log(chartData);\n            // buildChart(chartData);\n          });\n      };\n  \n      fetchData();\n    }, [casesType]);\n    return (\n        <div className={props.className} >\n            {data?.length>0 && (\n            <Line \n                data={{\n                    datasets: [\n                        {\n                            backgroundColor: '#e56b6f',\n                            borderColor: '#0081a7',\n                            borderWidth: 0.5,\n                            data: data,\n                            fill: true,\n                        }\n                    ],\n            }}\n            \n            option={options}\n            />\n\n            )}\n        </div>\n    )\n}\n\nexport default LineGraph;\n","import React,{useState,useEffect} from 'react';\nimport { \n  MenuItem,\n  Card,\n  FormControl,\n  Select,\n  CardContent,\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\"\nimport  {prettyPrintStat, sortData}  from './utill';\n\n\nfunction App() {\n  const [countries,setCountries]=useState([]);\n  const [country,setCountry]=useState('worldwide');\n  const [countryInfo,setcountryInfo]=useState({});\n  const [tableData,setTableData]=useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34, lng: -40 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries]=useState([]);\n  const [casesType, setCasesType]=useState('cases')\n\n  // const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((responce)=> responce.json())\n      .then((data)=>{\n        setcountryInfo(data)\n      })\n  }, [])\n\n  useEffect(() => {\n    const getCountriesData = async ()=>{\n      await fetch('https://disease.sh/v3/covid-19/countries')\n      .then((responce)=> responce.json())\n      .then((data)=>{\n        const countries = data.map((country)=>({\n          name: country.country, //engalnd , portugal ...\n          value: country.countryInfo.iso2 //UK, POR\n        }))\n        const sortedData=sortData(data);\n        setTableData(sortedData); \n        setMapCountries(data);\n        setCountries(countries);\n      })\n    }\n    getCountriesData();\n  }, [])\n\n\n  const onCountryChange = async (event)=>{\n    const countryCode=event.target.value;\n\n    const url=countryCode === \"worldwide\" ? \"https://disease.sh/v3/covid-19/all\":`https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        setCountry(countryCode)\n        setcountryInfo(data);\n        setMapCenter([ data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(6);\n      })\n  }\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* Header */}\n        {/* Title + Select input dropdown field */}\n        <div className=\"app__header\">\n          <h1>Covid-19 <span className=\"header__span\" >Data Base</span></h1>\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country} >\n              <MenuItem value='worldwide'>World Wide</MenuItem>\n              {\n                countries.map( (country)=>\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n                )\n              }   \n            </Select>\n          </FormControl>\n        </div>\n\n      <div className=\"app__stats\">\n        {/* infoBoxs title=\"corona virus cases\" */}\n        <InfoBox \n            active={casesType===\"cases\"}\n           onClick={e=> setCasesType('cases')}\n           title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)}/>\n\n        {/* InfoBoxs title=\"Recovery\" */}\n        <InfoBox active={casesType===\"recovered\"} onClick={e=> setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)}/>\n\n        {/* infoBoxs */}\n        <InfoBox active={casesType===\"deaths\"} onClick={e=> setCasesType('deaths')} title=\"Death\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n      </div>\n\n        {/* Map */}\n\n        <Map casesType={casesType} countries={mapCountries} center = {mapCenter} zoom = {mapZoom} />\n      \n      </div>\n      <Card className=\"app__right\">\n        <CardContent className=\"Right--box\">\n          <h3 className=\"Table header_names\">Live cases by country</h3>\n          {/* Table */}\n          <Table countries={tableData}/>\n          <h3 className=\"LineGraph header_names\">Worldwide new {casesType}</h3>\n          {/* Graph */} \n          <LineGraph className=\"app__graph\" casesType={ casesType}/>\n        </CardContent>\n      </Card>\n      </div>\n  )}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}